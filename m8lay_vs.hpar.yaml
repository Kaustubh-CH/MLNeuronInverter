# Neur-inver  config for  BBP3 training, serialized stims  (each stim is an independent sample)
#
# choose data path depending on facility

data_path:
  #perlmutter:  /pscratch/sd/b/balewski/tmp_bbp3_feb22/
  perlmutter:  /pscratch/sd/b/balewski/tmp_bbp3_march06/

data_conf:
    serialize_stims :  True  # False= append  timeBins
    #max_glob_samples_per_epoch: 40000  # optional, reduces epoch size
    num_data_workers: 4  

max_epochs: 12  
batch_size: 512

const_local_batch: True   # True is faster  but LR changes w/ num GPUs
validation_period: [1, 1] # [ period, len] (epochs)
#>>> validation is computed if  epoch%period<len

log_freq_per_epoch: 3
tb_show_graph: True

save_checkpoint: False  # only when loss improves
resume_checkpoint: False  # False: always start over 
# warning: for multi-gpu & resume --> val_loss explodes - no loop over GPUs
  
# APEX: Nvidia streamlined data-parallel  training
# AMP: Automatic Mixed Precision package
# autotune: # activates cudnn.benchmark

opt_pytorch:  
    amp: False
    apex:  False
    autotune:  False
    zerograd: False

train_conf:
    warmup_epochs: 10
    optimizer: [adam, 0.005] # initLR  
    LRsched: { plateau_patience: 8, reduceFactor: 0.11  }

model:
    myId:  m8lay_v1
    comment: 1-stim 2021-10 not optimized ML model

    conv_block: # CNN params
        filter: [30, 90, 180]
        kernel: [ 4,  4,  4]
        pool:   [ 4,  4,  4]

    instance_norm_slot: -9
    layer_norm: False
    batch_norm_cnn_slot: 3
    batch_norm_flat: True  # was former batch_norm

    fc_block: # FC params w/o last layer
       dims: [ 512, 512, 512, 256, 128 ]
       dropFrac: 0.02
